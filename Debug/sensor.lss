
sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000283  00800100  00800100  00000c76  2**0
                  ALLOC
  3 .eeprom       000000c2  00810000  00810000  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000246c  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000102c  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000158d  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  000059c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a0b  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d3b  00000000  00000000  0000690b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  00008646  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__ctors_end>
   4:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
   8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
   c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  10:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  18:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  1c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  20:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  24:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  28:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  30:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  34:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  3c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  40:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_16>
  44:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  48:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_18>
  4c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  50:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  54:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  58:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  5c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  60:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
  64:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>

00000068 <FontEx>:
  68:	ff ff ff ff ff ff 08 1c 3e 08 08 00 0c 06 3f 06     ........>.....?.
  78:	0c 00 0c 02 39 02 0c 00 10 20 10 08 04 00 18 24     ....9.... .....$
  88:	3c 24 18 00                                         <$..

0000008c <Font>:
	...
  94:	5f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     _...............
  a4:	24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 55 22     $*.*..#..db.6IU"
  b4:	50 00 00 00 03 00 00 00 00 1c 22 41 00 00 00 41     P........."A...A
  c4:	22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08 00     ".....>.....>...
  d4:	00 50 30 00 00 00 08 08 08 08 08 00 00 60 60 00     .P0..........``.
  e4:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
  f4:	7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31 00     .@..BaQIF.!AEK1.
 104:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
 114:	30 00 03 71 09 05 03 00 36 49 49 49 36 00 06 49     0..q....6III6..I
 124:	49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00 00     I)...66....V6...
 134:	08 14 22 41 00 00 14 14 14 14 14 00 00 41 22 14     .."A.........A".
 144:	08 00 02 01 51 09 06 00 32 49 79 41 3e 00 7e 11     ....Q...2IyA>.~.
 154:	11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..~..III6.>AAA".
 164:	7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09 09     .AAA>..IIIA.....
 174:	01 00 3e 41 41 49 7a 00 7f 08 08 08 7f 00 00 41     ..>AAIz........A
 184:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
 194:	7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08 10     .@@@@...........
 1a4:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
 1b4:	51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31 00     Q!^....)F.FIII1.
 1c4:	01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
 1d4:	1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07 08     ..?@8@?.c...c...
 1e4:	70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00 00     p...aQIEC...AA..
 1f4:	02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01 02     .... ..AA.......
 204:	04 00 40 40 40 40 40 00 00 01 02 04 00 00 20 54     ..@@@@@....... T
 214:	54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20 00     TTx..HDD8.8DDD .
 224:	38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09 01     8DDH..8TTT...~..
 234:	02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00 48     ......|.....x..H
 244:	7d 40 00 00 00 00 84 7d 00 00 7f 10 28 44 00 00     }@.....}....(D..
 254:	00 41 7f 40 00 00 7c 04 78 04 78 00 7c 08 04 04     .A.@..|.x.x.|...
 264:	78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18 24     x.8DDD8..$$$...$
 274:	24 28 fc 00 7c 08 04 04 08 00 48 54 54 54 20 00     $(..|.....HTTT .
 284:	04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40 20     .?D@ .<@@ |.. @ 
 294:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c a0     ..<@0@<.D(.(D...
 2a4:	a0 a0 7c 00 44 64 54 4c 44 00 00 08 36 41 00 00     ..|.DdTLD...6A..
 2b4:	00 00 7f 00 00 00 00 41 36 08 00 00 10 08 08 10     .......A6.......
 2c4:	08 00 00 00 00 00 00 00 20 54 54 d4 78 00 38 44     ........ TT.x.8D
 2d4:	46 45 20 00 38 54 54 d4 18 00 00 49 7f 44 00 00     FE .8TT....I.D..
 2e4:	7c 08 06 05 78 00 38 44 46 45 38 00 48 54 56 55     |...x.8DFE8.HTVU
 2f4:	20 00 44 64 56 4d 44 00 44 64 55 4c 44 00 7e 11      .DdVMD.DdULD.~.
 304:	11 91 7e 00 3c 42 46 43 24 00 7f 49 49 c9 41 00     ..~.<BFC$..II.A.
 314:	7f 50 48 44 40 00 7e 04 0b 10 7e 00 3c 42 46 43     .PHD@.~...~.<BFC
 324:	3c 00 4c 52 56 53 22 00 42 66 53 4a 46 00 42 62     <.LRVS".BfSJF.Bb
 334:	53 4a 46 00 00 00 00 00 00 00 00 00 00 00 00 00     SJF.............
	...

0000038c <__c.2423>:
 38c:	54 65 72 6d 6f 6d 65 74 72 00                       Termometr.

00000396 <Menu_Main>:
 396:	05 e7 03 da 03 cc 03 bf 03 b2 03 00 00 00 00 00     ................
 3a6:	00 a9 03                                            ...

000003a9 <Menu_Main_Title>:
 3a9:	53 65 74 74 69 6e 67 73 00                          Settings.

000003b2 <Menu_Main_Status>:
 3b2:	00 00 b8 03 80 00                                   ......

000003b8 <Menu_Main_Status_Text>:
 3b8:	53 74 61 74 75 73 00                                Status.

000003bf <Menu_Main_System>:
 3bf:	00 00 c5 03 80 00                                   ......

000003c5 <Menu_Main_System_Text>:
 3c5:	53 79 73 74 65 6d 00                                System.

000003cc <Menu_Main_Sensors>:
 3cc:	00 00 d2 03 80 00                                   ......

000003d2 <Menu_Main_Sensors_Text>:
 3d2:	53 65 6e 73 6f 72 73 00                             Sensors.

000003da <Menu_Main_Broker>:
 3da:	00 00 e0 03 80 00                                   ......

000003e0 <Menu_Main_Broker_Text>:
 3e0:	42 72 6f 6b 65 72 00                                Broker.

000003e7 <Menu_Main_Network>:
 3e7:	00 00 ed 03 80 00                                   ......

000003ed <Menu_Main_Network_Text>:
 3ed:	4e 65 74 77 6f 72 6b 00 00                          Network..

000003f6 <__ctors_end>:
 3f6:	11 24       	eor	r1, r1
 3f8:	1f be       	out	0x3f, r1	; 63
 3fa:	cf ef       	ldi	r28, 0xFF	; 255
 3fc:	d8 e0       	ldi	r29, 0x08	; 8
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	cd bf       	out	0x3d, r28	; 61

00000402 <__do_clear_bss>:
 402:	23 e0       	ldi	r18, 0x03	; 3
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b1 e0       	ldi	r27, 0x01	; 1
 408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
 40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
 40c:	a3 38       	cpi	r26, 0x83	; 131
 40e:	b2 07       	cpc	r27, r18
 410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>
 412:	0e 94 9d 05 	call	0xb3a	; 0xb3a <main>
 416:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

0000041a <__bad_interrupt>:
 41a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041e <ADC_Init>:

#include <avr/io.h>

void ADC_Init()
{
	ADMUX = 0;	// AREF (previous = 1 << REFS1;
 41e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // enable ADC, maximum prescaler (128)
 422:	87 e8       	ldi	r24, 0x87	; 135
 424:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 428:	08 95       	ret

0000042a <__vector_16>:
        DbRight.NewState = 0;
        return DbRight.PrevState;
    }

    return 0;
}
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	83 b1       	in	r24, 0x03	; 3
 43c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DbOK>
 440:	23 fb       	bst	r18, 3
 442:	22 27       	eor	r18, r18
 444:	20 f9       	bld	r18, 0
 446:	86 95       	lsr	r24
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	89 27       	eor	r24, r25
 44e:	28 17       	cp	r18, r24
 450:	39 f1       	breq	.+78     	; 0x4a0 <__vector_16+0x76>
 452:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	98 2f       	mov	r25, r24
 45a:	97 70       	andi	r25, 0x07	; 7
 45c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 460:	88 7f       	andi	r24, 0xF8	; 248
 462:	89 2b       	or	r24, r25
 464:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 468:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 46c:	87 70       	andi	r24, 0x07	; 7
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	04 97       	sbiw	r24, 0x04	; 4
 472:	dc f0       	brlt	.+54     	; 0x4aa <__vector_16+0x80>
 474:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 478:	88 7f       	andi	r24, 0xF8	; 248
 47a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 47e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 482:	80 61       	ori	r24, 0x10	; 16
 484:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 488:	83 b1       	in	r24, 0x03	; 3
 48a:	86 95       	lsr	r24
 48c:	81 70       	andi	r24, 0x01	; 1
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	89 27       	eor	r24, r25
 492:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <DbOK>
 496:	80 fb       	bst	r24, 0
 498:	93 f9       	bld	r25, 3
 49a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <DbOK>
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__vector_16+0x80>
 4a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 4a4:	88 7f       	andi	r24, 0xF8	; 248
 4a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 4aa:	83 b1       	in	r24, 0x03	; 3
 4ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <DbReturn>
 4b0:	93 fb       	bst	r25, 3
 4b2:	99 27       	eor	r25, r25
 4b4:	90 f9       	bld	r25, 0
 4b6:	82 fb       	bst	r24, 2
 4b8:	22 27       	eor	r18, r18
 4ba:	20 f9       	bld	r18, 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	82 27       	eor	r24, r18
 4c0:	98 17       	cp	r25, r24
 4c2:	41 f1       	breq	.+80     	; 0x514 <__vector_16+0xea>
 4c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	98 2f       	mov	r25, r24
 4cc:	97 70       	andi	r25, 0x07	; 7
 4ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 4d2:	88 7f       	andi	r24, 0xF8	; 248
 4d4:	89 2b       	or	r24, r25
 4d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 4da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 4de:	87 70       	andi	r24, 0x07	; 7
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	04 97       	sbiw	r24, 0x04	; 4
 4e4:	e4 f0       	brlt	.+56     	; 0x51e <__vector_16+0xf4>
 4e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 4ea:	88 7f       	andi	r24, 0xF8	; 248
 4ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 4f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 4fa:	83 b1       	in	r24, 0x03	; 3
 4fc:	82 fb       	bst	r24, 2
 4fe:	99 27       	eor	r25, r25
 500:	90 f9       	bld	r25, 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	89 27       	eor	r24, r25
 506:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <DbReturn>
 50a:	80 fb       	bst	r24, 0
 50c:	93 f9       	bld	r25, 3
 50e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <DbReturn>
 512:	05 c0       	rjmp	.+10     	; 0x51e <__vector_16+0xf4>
 514:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 518:	88 7f       	andi	r24, 0xF8	; 248
 51a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 51e:	83 b1       	in	r24, 0x03	; 3
 520:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <DbRight>
 524:	93 fb       	bst	r25, 3
 526:	99 27       	eor	r25, r25
 528:	90 f9       	bld	r25, 0
 52a:	80 95       	com	r24
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	98 17       	cp	r25, r24
 530:	21 f1       	breq	.+72     	; 0x57a <__vector_16+0x150>
 532:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	98 2f       	mov	r25, r24
 53a:	97 70       	andi	r25, 0x07	; 7
 53c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 540:	88 7f       	andi	r24, 0xF8	; 248
 542:	89 2b       	or	r24, r25
 544:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 548:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 54c:	87 70       	andi	r24, 0x07	; 7
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	04 97       	sbiw	r24, 0x04	; 4
 552:	c4 f0       	brlt	.+48     	; 0x584 <__vector_16+0x15a>
 554:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 558:	88 7f       	andi	r24, 0xF8	; 248
 55a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 55e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 562:	80 61       	ori	r24, 0x10	; 16
 564:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 568:	83 b1       	in	r24, 0x03	; 3
 56a:	80 95       	com	r24
 56c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <DbRight>
 570:	80 fb       	bst	r24, 0
 572:	93 f9       	bld	r25, 3
 574:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <DbRight>
 578:	05 c0       	rjmp	.+10     	; 0x584 <__vector_16+0x15a>
 57a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 57e:	88 7f       	andi	r24, 0xF8	; 248
 580:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 584:	89 b1       	in	r24, 0x09	; 9
 586:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <DbDown>
 58a:	93 fb       	bst	r25, 3
 58c:	99 27       	eor	r25, r25
 58e:	90 f9       	bld	r25, 0
 590:	80 95       	com	r24
 592:	88 1f       	adc	r24, r24
 594:	88 27       	eor	r24, r24
 596:	88 1f       	adc	r24, r24
 598:	98 17       	cp	r25, r24
 59a:	39 f1       	breq	.+78     	; 0x5ea <__vector_16+0x1c0>
 59c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	98 2f       	mov	r25, r24
 5a4:	97 70       	andi	r25, 0x07	; 7
 5a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5aa:	88 7f       	andi	r24, 0xF8	; 248
 5ac:	89 2b       	or	r24, r25
 5ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 5b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5b6:	87 70       	andi	r24, 0x07	; 7
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	04 97       	sbiw	r24, 0x04	; 4
 5bc:	dc f0       	brlt	.+54     	; 0x5f4 <__vector_16+0x1ca>
 5be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5c2:	88 7f       	andi	r24, 0xF8	; 248
 5c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 5c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5cc:	80 61       	ori	r24, 0x10	; 16
 5ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 5d2:	89 b1       	in	r24, 0x09	; 9
 5d4:	80 95       	com	r24
 5d6:	88 1f       	adc	r24, r24
 5d8:	88 27       	eor	r24, r24
 5da:	88 1f       	adc	r24, r24
 5dc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <DbDown>
 5e0:	80 fb       	bst	r24, 0
 5e2:	93 f9       	bld	r25, 3
 5e4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <DbDown>
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <__vector_16+0x1ca>
 5ea:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 5ee:	88 7f       	andi	r24, 0xF8	; 248
 5f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 5f4:	89 b1       	in	r24, 0x09	; 9
 5f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <DbUp>
 5fa:	93 fb       	bst	r25, 3
 5fc:	99 27       	eor	r25, r25
 5fe:	90 f9       	bld	r25, 0
 600:	86 fb       	bst	r24, 6
 602:	22 27       	eor	r18, r18
 604:	20 f9       	bld	r18, 0
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	82 27       	eor	r24, r18
 60a:	98 17       	cp	r25, r24
 60c:	41 f1       	breq	.+80     	; 0x65e <__vector_16+0x234>
 60e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 612:	8f 5f       	subi	r24, 0xFF	; 255
 614:	98 2f       	mov	r25, r24
 616:	97 70       	andi	r25, 0x07	; 7
 618:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 61c:	88 7f       	andi	r24, 0xF8	; 248
 61e:	89 2b       	or	r24, r25
 620:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 624:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 628:	87 70       	andi	r24, 0x07	; 7
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	04 97       	sbiw	r24, 0x04	; 4
 62e:	e4 f0       	brlt	.+56     	; 0x668 <__vector_16+0x23e>
 630:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 634:	88 7f       	andi	r24, 0xF8	; 248
 636:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 63a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 63e:	80 61       	ori	r24, 0x10	; 16
 640:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 644:	89 b1       	in	r24, 0x09	; 9
 646:	86 fb       	bst	r24, 6
 648:	99 27       	eor	r25, r25
 64a:	90 f9       	bld	r25, 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	89 27       	eor	r24, r25
 650:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <DbUp>
 654:	80 fb       	bst	r24, 0
 656:	93 f9       	bld	r25, 3
 658:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DbUp>
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__vector_16+0x23e>
 65e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 662:	88 7f       	andi	r24, 0xF8	; 248
 664:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 668:	89 b1       	in	r24, 0x09	; 9
 66a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <DbLeft>
 66e:	93 fb       	bst	r25, 3
 670:	99 27       	eor	r25, r25
 672:	90 f9       	bld	r25, 0
 674:	85 fb       	bst	r24, 5
 676:	22 27       	eor	r18, r18
 678:	20 f9       	bld	r18, 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	82 27       	eor	r24, r18
 67e:	98 17       	cp	r25, r24
 680:	41 f1       	breq	.+80     	; 0x6d2 <__vector_16+0x2a8>
 682:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	98 2f       	mov	r25, r24
 68a:	97 70       	andi	r25, 0x07	; 7
 68c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 690:	88 7f       	andi	r24, 0xF8	; 248
 692:	89 2b       	or	r24, r25
 694:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 698:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 69c:	87 70       	andi	r24, 0x07	; 7
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	04 97       	sbiw	r24, 0x04	; 4
 6a2:	e4 f0       	brlt	.+56     	; 0x6dc <__vector_16+0x2b2>
 6a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 6a8:	88 7f       	andi	r24, 0xF8	; 248
 6aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 6ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 6b2:	80 61       	ori	r24, 0x10	; 16
 6b4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 6b8:	89 b1       	in	r24, 0x09	; 9
 6ba:	85 fb       	bst	r24, 5
 6bc:	99 27       	eor	r25, r25
 6be:	90 f9       	bld	r25, 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	89 27       	eor	r24, r25
 6c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <DbLeft>
 6c8:	80 fb       	bst	r24, 0
 6ca:	93 f9       	bld	r25, 3
 6cc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <DbLeft>
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__vector_16+0x2b2>
 6d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 6d6:	88 7f       	andi	r24, 0xF8	; 248
 6d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	2f 91       	pop	r18
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <SetupButtons>:
 6ec:	85 b5       	in	r24, 0x25	; 37
 6ee:	82 60       	ori	r24, 0x02	; 2
 6f0:	85 bd       	out	0x25, r24	; 37
 6f2:	ee e6       	ldi	r30, 0x6E	; 110
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
 6fc:	21 98       	cbi	0x04, 1	; 4
 6fe:	29 9a       	sbi	0x05, 1	; 5
 700:	22 98       	cbi	0x04, 2	; 4
 702:	2a 9a       	sbi	0x05, 2	; 5
 704:	20 98       	cbi	0x04, 0	; 4
 706:	28 9a       	sbi	0x05, 0	; 5
 708:	57 98       	cbi	0x0a, 7	; 10
 70a:	5f 9a       	sbi	0x0b, 7	; 11
 70c:	56 98       	cbi	0x0a, 6	; 10
 70e:	5e 9a       	sbi	0x0b, 6	; 11
 710:	55 98       	cbi	0x0a, 5	; 10
 712:	5d 9a       	sbi	0x0b, 5	; 11
 714:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 718:	88 7f       	andi	r24, 0xF8	; 248
 71a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 71e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 722:	87 7f       	andi	r24, 0xF7	; 247
 724:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 728:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 72c:	8f 7e       	andi	r24, 0xEF	; 239
 72e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 732:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 736:	88 7f       	andi	r24, 0xF8	; 248
 738:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 73c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 740:	87 7f       	andi	r24, 0xF7	; 247
 742:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 746:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <DbReturn>
 74a:	8f 7e       	andi	r24, 0xEF	; 239
 74c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <DbReturn>
 750:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 754:	88 7f       	andi	r24, 0xF8	; 248
 756:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 75a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 75e:	87 7f       	andi	r24, 0xF7	; 247
 760:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 764:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DbRight>
 768:	8f 7e       	andi	r24, 0xEF	; 239
 76a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DbRight>
 76e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 772:	88 7f       	andi	r24, 0xF8	; 248
 774:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 778:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 77c:	87 7f       	andi	r24, 0xF7	; 247
 77e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 782:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 786:	8f 7e       	andi	r24, 0xEF	; 239
 788:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
 78c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 790:	88 7f       	andi	r24, 0xF8	; 248
 792:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 796:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 7a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 7a4:	8f 7e       	andi	r24, 0xEF	; 239
 7a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
 7aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 7ae:	88 7f       	andi	r24, 0xF8	; 248
 7b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 7b4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 7b8:	87 7f       	andi	r24, 0xF7	; 247
 7ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 7be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <DbLeft>
 7c2:	8f 7e       	andi	r24, 0xEF	; 239
 7c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <DbLeft>
 7c8:	78 94       	sei
 7ca:	08 95       	ret

000007cc <Button_OK_Pressed>:
 7cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 7d0:	84 ff       	sbrs	r24, 4
 7d2:	0b c0       	rjmp	.+22     	; 0x7ea <Button_OK_Pressed+0x1e>
 7d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 7d8:	8f 7e       	andi	r24, 0xEF	; 239
 7da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DbOK>
 7de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DbOK>
 7e2:	83 fb       	bst	r24, 3
 7e4:	88 27       	eor	r24, r24
 7e6:	80 f9       	bld	r24, 0
 7e8:	08 95       	ret
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	08 95       	ret

000007ee <Button_Down_Pressed>:

bool Button_Down_Pressed()
{
    if(DbDown.NewState)
 7ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 7f2:	84 ff       	sbrs	r24, 4
 7f4:	0b c0       	rjmp	.+22     	; 0x80c <Button_Down_Pressed+0x1e>
    {
        DbDown.NewState = 0;
 7f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 7fa:	8f 7e       	andi	r24, 0xEF	; 239
 7fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <DbDown>
        return DbDown.PrevState;
 800:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <DbDown>
 804:	83 fb       	bst	r24, 3
 806:	88 27       	eor	r24, r24
 808:	80 f9       	bld	r24, 0
 80a:	08 95       	ret
    }

    return 0;
 80c:	80 e0       	ldi	r24, 0x00	; 0
}
 80e:	08 95       	ret

00000810 <Button_Up_Pressed>:

bool Button_Up_Pressed()
{
    if(DbUp.NewState)
 810:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 814:	84 ff       	sbrs	r24, 4
 816:	0b c0       	rjmp	.+22     	; 0x82e <Button_Up_Pressed+0x1e>
    {
        DbUp.NewState = 0;
 818:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 81c:	8f 7e       	andi	r24, 0xEF	; 239
 81e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <DbUp>
        return DbUp.PrevState;
 822:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <DbUp>
 826:	83 fb       	bst	r24, 3
 828:	88 27       	eor	r24, r24
 82a:	80 f9       	bld	r24, 0
 82c:	08 95       	ret
    }

    return 0;
 82e:	80 e0       	ldi	r24, 0x00	; 0
}
 830:	08 95       	ret

00000832 <Interface_Menu_P>:
{
	return (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i]);
}

void Interface_Menu_P(const TMenu* Menu)
{
 832:	7c 01       	movw	r14, r24
	int8_t Selection = 0;
	int8_t View = Selection;
	uint8_t NumEntries =  pgm_read_byte(&Menu->NumEntries);
 834:	fc 01       	movw	r30, r24
 836:	84 91       	lpm	r24, Z
	while(1)
	{
		LCD_Clear();
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
		for(uint8_t i = 0; i<((NumEntries>4) ? 4 : NumEntries); i++)
 838:	a8 2e       	mov	r10, r24
 83a:	b1 2c       	mov	r11, r1
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	18 f4       	brcc	.+6      	; 0x846 <Interface_Menu_P+0x14>
 840:	98 2f       	mov	r25, r24
 842:	8b 2d       	mov	r24, r11
 844:	02 c0       	rjmp	.+4      	; 0x84a <Interface_Menu_P+0x18>
 846:	94 e0       	ldi	r25, 0x04	; 4
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	c9 2f       	mov	r28, r25
 84c:	d8 2f       	mov	r29, r24
}

void Interface_Menu_P(const TMenu* Menu)
{
	int8_t Selection = 0;
	int8_t View = Selection;
 84e:	81 2c       	mov	r8, r1
	return (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i]);
}

void Interface_Menu_P(const TMenu* Menu)
{
	int8_t Selection = 0;
 850:	71 2c       	mov	r7, r1
	int8_t View = Selection;
	uint8_t NumEntries =  pgm_read_byte(&Menu->NumEntries);
	while(1)
	{
		LCD_Clear();
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
 852:	67 01       	movw	r12, r14
 854:	f1 e1       	ldi	r31, 0x11	; 17
 856:	cf 0e       	add	r12, r31
 858:	d1 1c       	adc	r13, r1

		if(Button_Up_Pressed())
			if(Selection > 0)
				Selection--;
		if(Button_Down_Pressed())
			if(Selection < NumEntries-1)
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	a8 1a       	sub	r10, r24
 85e:	b1 08       	sbc	r11, r1
	int8_t Selection = 0;
	int8_t View = Selection;
	uint8_t NumEntries =  pgm_read_byte(&Menu->NumEntries);
	while(1)
	{
		LCD_Clear();
 860:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_Clear>
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
 864:	f6 01       	movw	r30, r12
 866:	45 91       	lpm	r20, Z+
 868:	54 91       	lpm	r21, Z
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_DrawText_P>
		for(uint8_t i = 0; i<((NumEntries>4) ? 4 : NumEntries); i++)
 876:	91 2c       	mov	r9, r1
			LCD_DrawText_P(0, i+2, pgm_read_ptr(&( (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i+View]) )->Text ) );
 878:	08 2d       	mov	r16, r8
 87a:	08 2c       	mov	r0, r8
 87c:	00 0c       	add	r0, r0
 87e:	11 0b       	sbc	r17, r17
	uint8_t NumEntries =  pgm_read_byte(&Menu->NumEntries);
	while(1)
	{
		LCD_Clear();
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
		for(uint8_t i = 0; i<((NumEntries>4) ? 4 : NumEntries); i++)
 880:	15 c0       	rjmp	.+42     	; 0x8ac <Interface_Menu_P+0x7a>
			LCD_DrawText_P(0, i+2, pgm_read_ptr(&( (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i+View]) )->Text ) );
 882:	f8 01       	movw	r30, r16
 884:	e6 0f       	add	r30, r22
 886:	f7 1f       	adc	r31, r23
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	31 96       	adiw	r30, 0x01	; 1
 88e:	ee 0d       	add	r30, r14
 890:	ff 1d       	adc	r31, r15
 892:	85 91       	lpm	r24, Z+
 894:	94 91       	lpm	r25, Z
 896:	fc 01       	movw	r30, r24
 898:	32 96       	adiw	r30, 0x02	; 2
 89a:	45 91       	lpm	r20, Z+
 89c:	54 91       	lpm	r21, Z
 89e:	6e 5f       	subi	r22, 0xFE	; 254
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_DrawText_P>
	uint8_t NumEntries =  pgm_read_byte(&Menu->NumEntries);
	while(1)
	{
		LCD_Clear();
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
		for(uint8_t i = 0; i<((NumEntries>4) ? 4 : NumEntries); i++)
 8aa:	93 94       	inc	r9
 8ac:	69 2d       	mov	r22, r9
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	6c 17       	cp	r22, r28
 8b2:	7d 07       	cpc	r23, r29
 8b4:	34 f3       	brlt	.-52     	; 0x882 <Interface_Menu_P+0x50>
 8b6:	10 e0       	ldi	r17, 0x00	; 0
			LCD_DrawText_P(0, i+2, pgm_read_ptr(&( (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i+View]) )->Text ) );
		for(uint8_t i = 0; i<14; i++)
			LCD_InvertCell(i, (Selection-View)+2);
 8b8:	67 2c       	mov	r6, r7
 8ba:	98 2c       	mov	r9, r8
 8bc:	02 e0       	ldi	r16, 0x02	; 2
 8be:	07 0d       	add	r16, r7
 8c0:	08 19       	sub	r16, r8
 8c2:	59 2c       	mov	r5, r9
 8c4:	60 2f       	mov	r22, r16
 8c6:	81 2f       	mov	r24, r17
 8c8:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_InvertCell>
	{
		LCD_Clear();
		LCD_DrawText_P(0, 0, pgm_read_ptr(&Menu->Title));
		for(uint8_t i = 0; i<((NumEntries>4) ? 4 : NumEntries); i++)
			LCD_DrawText_P(0, i+2, pgm_read_ptr(&( (const TMenuEntry*)pgm_read_ptr(&Menu->Entries[i+View]) )->Text ) );
		for(uint8_t i = 0; i<14; i++)
 8cc:	1f 5f       	subi	r17, 0xFF	; 255
 8ce:	1e 30       	cpi	r17, 0x0E	; 14
 8d0:	c1 f7       	brne	.-16     	; 0x8c2 <Interface_Menu_P+0x90>
			LCD_InvertCell(i, (Selection-View)+2);
		LCD_Render();
 8d2:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_Render>

		if(Button_Up_Pressed())
 8d6:	0e 94 08 04 	call	0x810	; 0x810 <Button_Up_Pressed>
 8da:	88 23       	and	r24, r24
 8dc:	29 f0       	breq	.+10     	; 0x8e8 <Interface_Menu_P+0xb6>
			if(Selection > 0)
 8de:	17 14       	cp	r1, r7
 8e0:	1c f4       	brge	.+6      	; 0x8e8 <Interface_Menu_P+0xb6>
				Selection--;
 8e2:	77 24       	eor	r7, r7
 8e4:	7a 94       	dec	r7
 8e6:	76 0c       	add	r7, r6
		if(Button_Down_Pressed())
 8e8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Button_Down_Pressed>
 8ec:	88 23       	and	r24, r24
 8ee:	41 f0       	breq	.+16     	; 0x900 <__stack+0x1>
			if(Selection < NumEntries-1)
 8f0:	87 2d       	mov	r24, r7
 8f2:	07 2c       	mov	r0, r7
 8f4:	00 0c       	add	r0, r0
 8f6:	99 0b       	sbc	r25, r25
 8f8:	8a 15       	cp	r24, r10
 8fa:	9b 05       	cpc	r25, r11
 8fc:	0c f4       	brge	.+2      	; 0x900 <__stack+0x1>
				Selection++;
 8fe:	73 94       	inc	r7
		if(View+3 < Selection) // follow the lower selection
 900:	88 2d       	mov	r24, r8
 902:	08 2c       	mov	r0, r8
 904:	00 0c       	add	r0, r0
 906:	99 0b       	sbc	r25, r25
 908:	03 96       	adiw	r24, 0x03	; 3
 90a:	27 2d       	mov	r18, r7
 90c:	07 2c       	mov	r0, r7
 90e:	00 0c       	add	r0, r0
 910:	33 0b       	sbc	r19, r19
 912:	82 17       	cp	r24, r18
 914:	93 07       	cpc	r25, r19
 916:	1c f4       	brge	.+6      	; 0x91e <__stack+0x1f>
			View++;
 918:	88 24       	eor	r8, r8
 91a:	83 94       	inc	r8
 91c:	85 0c       	add	r8, r5
		if(Selection < View) // follow the upper selection
 91e:	78 14       	cp	r7, r8
 920:	0c f4       	brge	.+2      	; 0x924 <__stack+0x25>
			View--;
 922:	8a 94       	dec	r8
		if(Button_OK_Pressed())
 924:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Button_OK_Pressed>
 928:	9b cf       	rjmp	.-202    	; 0x860 <Interface_Menu_P+0x2e>

0000092a <LCD_WriteByte>:
        {
                LCD_SetPixel(PosX+j, PosY+k+i*8, (Byte>>k));
        }
    }

}
 92a:	27 e0       	ldi	r18, 0x07	; 7
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	ac 01       	movw	r20, r24
 932:	02 2e       	mov	r0, r18
 934:	02 c0       	rjmp	.+4      	; 0x93a <LCD_WriteByte+0x10>
 936:	55 95       	asr	r21
 938:	47 95       	ror	r20
 93a:	0a 94       	dec	r0
 93c:	e2 f7       	brpl	.-8      	; 0x936 <LCD_WriteByte+0xc>
 93e:	40 ff       	sbrs	r20, 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <LCD_WriteByte+0x1c>
 942:	2a 9a       	sbi	0x05, 2	; 5
 944:	01 c0       	rjmp	.+2      	; 0x948 <LCD_WriteByte+0x1e>
 946:	2a 98       	cbi	0x05, 2	; 5
 948:	29 9a       	sbi	0x05, 1	; 5
 94a:	29 98       	cbi	0x05, 1	; 5
 94c:	21 50       	subi	r18, 0x01	; 1
 94e:	31 09       	sbc	r19, r1
 950:	78 f7       	brcc	.-34     	; 0x930 <LCD_WriteByte+0x6>
 952:	08 95       	ret

00000954 <LCD_Clear>:
 954:	29 e0       	ldi	r18, 0x09	; 9
 956:	31 e0       	ldi	r19, 0x01	; 1
 958:	4f e0       	ldi	r20, 0x0F	; 15
 95a:	51 e0       	ldi	r21, 0x01	; 1
 95c:	0a c0       	rjmp	.+20     	; 0x972 <LCD_Clear+0x1e>
 95e:	10 82       	st	Z, r1
 960:	36 96       	adiw	r30, 0x06	; 6
 962:	e8 17       	cp	r30, r24
 964:	f9 07       	cpc	r31, r25
 966:	d9 f7       	brne	.-10     	; 0x95e <LCD_Clear+0xa>
 968:	2f 5f       	subi	r18, 0xFF	; 255
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	42 17       	cp	r20, r18
 96e:	53 07       	cpc	r21, r19
 970:	29 f0       	breq	.+10     	; 0x97c <LCD_Clear+0x28>
 972:	c9 01       	movw	r24, r18
 974:	88 50       	subi	r24, 0x08	; 8
 976:	9e 4f       	sbci	r25, 0xFE	; 254
 978:	f9 01       	movw	r30, r18
 97a:	f1 cf       	rjmp	.-30     	; 0x95e <LCD_Clear+0xa>
 97c:	08 95       	ret

0000097e <LCD_SendCommand>:
 97e:	2b 98       	cbi	0x05, 3	; 5
 980:	2d 98       	cbi	0x05, 5	; 5
 982:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_WriteByte>
 986:	2d 9a       	sbi	0x05, 5	; 5
 988:	08 95       	ret

0000098a <LCD_Init>:
 98a:	84 b1       	in	r24, 0x04	; 4
 98c:	8e 63       	ori	r24, 0x3E	; 62
 98e:	84 b9       	out	0x04, r24	; 4
 990:	15 b8       	out	0x05, r1	; 5
 992:	2c 9a       	sbi	0x05, 4	; 5
 994:	2f ef       	ldi	r18, 0xFF	; 255
 996:	81 ee       	ldi	r24, 0xE1	; 225
 998:	94 e0       	ldi	r25, 0x04	; 4
 99a:	21 50       	subi	r18, 0x01	; 1
 99c:	80 40       	sbci	r24, 0x00	; 0
 99e:	90 40       	sbci	r25, 0x00	; 0
 9a0:	e1 f7       	brne	.-8      	; 0x99a <LCD_Init+0x10>
 9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <LCD_Init+0x1a>
 9a4:	00 00       	nop
 9a6:	81 e2       	ldi	r24, 0x21	; 33
 9a8:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_SendCommand>
 9ac:	84 e1       	ldi	r24, 0x14	; 20
 9ae:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_SendCommand>
 9b2:	8f eb       	ldi	r24, 0xBF	; 191
 9b4:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_SendCommand>
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_SendCommand>
 9be:	8c e0       	ldi	r24, 0x0C	; 12
 9c0:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_SendCommand>
 9c4:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_Clear>
 9c8:	08 95       	ret

000009ca <LCD_DrawText_P>:
 9ca:	ff 92       	push	r15
 9cc:	0f 93       	push	r16
 9ce:	1f 93       	push	r17
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	fa 01       	movw	r30, r20
 9d6:	24 91       	lpm	r18, Z
 9d8:	22 23       	and	r18, r18
 9da:	09 f4       	brne	.+2      	; 0x9de <LCD_DrawText_P+0x14>
 9dc:	55 c0       	rjmp	.+170    	; 0xa88 <LCD_DrawText_P+0xbe>
 9de:	fa 01       	movw	r30, r20
 9e0:	04 91       	lpm	r16, Z
 9e2:	20 2f       	mov	r18, r16
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	e9 01       	movw	r28, r18
 9e8:	cc 0f       	add	r28, r28
 9ea:	dd 1f       	adc	r29, r29
 9ec:	c2 0f       	add	r28, r18
 9ee:	d3 1f       	adc	r29, r19
 9f0:	cc 0f       	add	r28, r28
 9f2:	dd 1f       	adc	r29, r29
 9f4:	de 01       	movw	r26, r28
 9f6:	a8 59       	subi	r26, 0x98	; 152
 9f8:	bf 4f       	sbci	r27, 0xFF	; 255
 9fa:	20 52       	subi	r18, 0x20	; 32
 9fc:	31 09       	sbc	r19, r1
 9fe:	f9 01       	movw	r30, r18
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	2e 0f       	add	r18, r30
 a06:	3f 1f       	adc	r19, r31
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	24 57       	subi	r18, 0x74	; 116
 a0e:	3f 4f       	sbci	r19, 0xFF	; 255
 a10:	c2 59       	subi	r28, 0x92	; 146
 a12:	df 4f       	sbci	r29, 0xFF	; 255
 a14:	1f ef       	ldi	r17, 0xFF	; 255
 a16:	10 0f       	add	r17, r16
 a18:	84 35       	cpi	r24, 0x54	; 84
 a1a:	91 05       	cpc	r25, r1
 a1c:	24 f0       	brlt	.+8      	; 0xa26 <LCD_DrawText_P+0x5c>
 a1e:	6f 5f       	subi	r22, 0xFF	; 255
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	66 30       	cpi	r22, 0x06	; 6
 a28:	71 05       	cpc	r23, r1
 a2a:	74 f5       	brge	.+92     	; 0xa88 <LCD_DrawText_P+0xbe>
 a2c:	15 30       	cpi	r17, 0x05	; 5
 a2e:	78 f4       	brcc	.+30     	; 0xa4e <LCD_DrawText_P+0x84>
 a30:	fd 01       	movw	r30, r26
 a32:	f4 90       	lpm	r15, Z
 a34:	fc 01       	movw	r30, r24
 a36:	ee 0f       	add	r30, r30
 a38:	ff 1f       	adc	r31, r31
 a3a:	e8 0f       	add	r30, r24
 a3c:	f9 1f       	adc	r31, r25
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	e7 5f       	subi	r30, 0xF7	; 247
 a44:	fe 4f       	sbci	r31, 0xFE	; 254
 a46:	e6 0f       	add	r30, r22
 a48:	f7 1f       	adc	r31, r23
 a4a:	f0 82       	st	Z, r15
 a4c:	10 c0       	rjmp	.+32     	; 0xa6e <LCD_DrawText_P+0xa4>
 a4e:	0f 37       	cpi	r16, 0x7F	; 127
 a50:	70 f4       	brcc	.+28     	; 0xa6e <LCD_DrawText_P+0xa4>
 a52:	f9 01       	movw	r30, r18
 a54:	f4 90       	lpm	r15, Z
 a56:	fc 01       	movw	r30, r24
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	e8 0f       	add	r30, r24
 a5e:	f9 1f       	adc	r31, r25
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	e7 5f       	subi	r30, 0xF7	; 247
 a66:	fe 4f       	sbci	r31, 0xFE	; 254
 a68:	e6 0f       	add	r30, r22
 a6a:	f7 1f       	adc	r31, r23
 a6c:	f0 82       	st	Z, r15
 a6e:	01 96       	adiw	r24, 0x01	; 1
 a70:	11 96       	adiw	r26, 0x01	; 1
 a72:	2f 5f       	subi	r18, 0xFF	; 255
 a74:	3f 4f       	sbci	r19, 0xFF	; 255
 a76:	ac 17       	cp	r26, r28
 a78:	bd 07       	cpc	r27, r29
 a7a:	71 f6       	brne	.-100    	; 0xa18 <LCD_DrawText_P+0x4e>
 a7c:	4f 5f       	subi	r20, 0xFF	; 255
 a7e:	5f 4f       	sbci	r21, 0xFF	; 255
 a80:	fa 01       	movw	r30, r20
 a82:	24 91       	lpm	r18, Z
 a84:	21 11       	cpse	r18, r1
 a86:	ab cf       	rjmp	.-170    	; 0x9de <LCD_DrawText_P+0x14>
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	1f 91       	pop	r17
 a8e:	0f 91       	pop	r16
 a90:	ff 90       	pop	r15
 a92:	08 95       	ret

00000a94 <LCD_InvertCell>:

void LCD_InvertCell(int8_t PosX, int8_t PosY)
{
 a94:	08 2e       	mov	r0, r24
 a96:	00 0c       	add	r0, r0
 a98:	99 0b       	sbc	r25, r25
 a9a:	fc 01       	movw	r30, r24
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	8e 0f       	add	r24, r30
 aa2:	9f 1f       	adc	r25, r31
 aa4:	88 0f       	add	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	fc 01       	movw	r30, r24
 aaa:	ee 0f       	add	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	e8 0f       	add	r30, r24
 ab0:	f9 1f       	adc	r31, r25
 ab2:	ee 0f       	add	r30, r30
 ab4:	ff 1f       	adc	r31, r31
 ab6:	e6 0f       	add	r30, r22
 ab8:	f1 1d       	adc	r31, r1
 aba:	67 fd       	sbrc	r22, 7
 abc:	fa 95       	dec	r31
 abe:	e7 5f       	subi	r30, 0xF7	; 247
 ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    uint8_t i;
    for(i = 0; i<6; i++)
 ac2:	90 e0       	ldi	r25, 0x00	; 0
        DisplayBuffer[PosX*6+i][PosY] ^= 0xff;
 ac4:	80 81       	ld	r24, Z
 ac6:	80 95       	com	r24
 ac8:	80 83       	st	Z, r24
}

void LCD_InvertCell(int8_t PosX, int8_t PosY)
{
    uint8_t i;
    for(i = 0; i<6; i++)
 aca:	9f 5f       	subi	r25, 0xFF	; 255
 acc:	36 96       	adiw	r30, 0x06	; 6
 ace:	96 30       	cpi	r25, 0x06	; 6
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <LCD_InvertCell+0x30>
        DisplayBuffer[PosX*6+i][PosY] ^= 0xff;
}
 ad2:	08 95       	ret

00000ad4 <LCD_Render>:

void LCD_Render()
{
 ad4:	cf 92       	push	r12
 ad6:	df 92       	push	r13
 ad8:	ef 92       	push	r14
 ada:	ff 92       	push	r15
 adc:	0f 93       	push	r16
 ade:	1f 93       	push	r17
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
    LCD_PORT |= (1 << LCD_DC);
 ae4:	2b 9a       	sbi	0x05, 3	; 5
    LCD_PORT &= ~(1 << LCD_SCE);
 ae6:	2d 98       	cbi	0x05, 5	; 5
 ae8:	0f 2e       	mov	r0, r31
 aea:	f9 e0       	ldi	r31, 0x09	; 9
 aec:	ef 2e       	mov	r14, r31
 aee:	f1 e0       	ldi	r31, 0x01	; 1
 af0:	ff 2e       	mov	r15, r31
 af2:	f0 2d       	mov	r31, r0
 af4:	0f 2e       	mov	r0, r31
 af6:	ff e0       	ldi	r31, 0x0F	; 15
 af8:	cf 2e       	mov	r12, r31
 afa:	f1 e0       	ldi	r31, 0x01	; 1
 afc:	df 2e       	mov	r13, r31
 afe:	f0 2d       	mov	r31, r0
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <LCD_Render+0x48>
    uint8_t i,j;
    for(i = 0; i<DRAM_HEIGHT; i++)
        for(j = 0; j<DRAM_WIDTH; j++)
            LCD_WriteByte(DisplayBuffer[j][i]);
 b02:	88 81       	ld	r24, Y
 b04:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_WriteByte>
 b08:	26 96       	adiw	r28, 0x06	; 6
{
    LCD_PORT |= (1 << LCD_DC);
    LCD_PORT &= ~(1 << LCD_SCE);
    uint8_t i,j;
    for(i = 0; i<DRAM_HEIGHT; i++)
        for(j = 0; j<DRAM_WIDTH; j++)
 b0a:	c0 17       	cp	r28, r16
 b0c:	d1 07       	cpc	r29, r17
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <LCD_Render+0x2e>
 b10:	8f ef       	ldi	r24, 0xFF	; 255
 b12:	e8 1a       	sub	r14, r24
 b14:	f8 0a       	sbc	r15, r24
void LCD_Render()
{
    LCD_PORT |= (1 << LCD_DC);
    LCD_PORT &= ~(1 << LCD_SCE);
    uint8_t i,j;
    for(i = 0; i<DRAM_HEIGHT; i++)
 b16:	ce 14       	cp	r12, r14
 b18:	df 04       	cpc	r13, r15
 b1a:	29 f0       	breq	.+10     	; 0xb26 <LCD_Render+0x52>
 b1c:	87 01       	movw	r16, r14
 b1e:	08 50       	subi	r16, 0x08	; 8
 b20:	1e 4f       	sbci	r17, 0xFE	; 254
    for(i = 0; i<6; i++)
        DisplayBuffer[PosX*6+i][PosY] ^= 0xff;
}

void LCD_Render()
{
 b22:	e7 01       	movw	r28, r14
 b24:	ee cf       	rjmp	.-36     	; 0xb02 <LCD_Render+0x2e>
    LCD_PORT &= ~(1 << LCD_SCE);
    uint8_t i,j;
    for(i = 0; i<DRAM_HEIGHT; i++)
        for(j = 0; j<DRAM_WIDTH; j++)
            LCD_WriteByte(DisplayBuffer[j][i]);
    LCD_PORT |= (1 << LCD_SCE);
 b26:	2d 9a       	sbi	0x05, 5	; 5
}
 b28:	df 91       	pop	r29
 b2a:	cf 91       	pop	r28
 b2c:	1f 91       	pop	r17
 b2e:	0f 91       	pop	r16
 b30:	ff 90       	pop	r15
 b32:	ef 90       	pop	r14
 b34:	df 90       	pop	r13
 b36:	cf 90       	pop	r12
 b38:	08 95       	ret

00000b3a <main>:
	_delay_ms(1000);
}

int main(void)
{
	SetupButtons();
 b3a:	0e 94 76 03 	call	0x6ec	; 0x6ec <SetupButtons>
	//DDRD |= (1 << PD6);
	//PORTD &= ~(1 << PD6);
	const float vRef = 3.3f;
	char Buffer[32];
	char fBuffer[16];
	LCD_Init();
 b3e:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_Init>
	ADC_Init();
 b42:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_Init>
	//SetupButtons();
	
	LCD_DrawText_P(0, 2, PSTR("Termometr"));
 b46:	4c e8       	ldi	r20, 0x8C	; 140
 b48:	53 e0       	ldi	r21, 0x03	; 3
 b4a:	62 e0       	ldi	r22, 0x02	; 2
 b4c:	70 e0       	ldi	r23, 0x00	; 0
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 e5 04 	call	0x9ca	; 0x9ca <LCD_DrawText_P>
	LCD_Render();
 b56:	0e 94 6a 05 	call	0xad4	; 0xad4 <LCD_Render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b5a:	2f ef       	ldi	r18, 0xFF	; 255
 b5c:	87 ea       	ldi	r24, 0xA7	; 167
 b5e:	91 e6       	ldi	r25, 0x61	; 97
 b60:	21 50       	subi	r18, 0x01	; 1
 b62:	80 40       	sbci	r24, 0x00	; 0
 b64:	90 40       	sbci	r25, 0x00	; 0
 b66:	e1 f7       	brne	.-8      	; 0xb60 <main+0x26>
 b68:	00 c0       	rjmp	.+0      	; 0xb6a <main+0x30>
 b6a:	00 00       	nop
	_delay_ms(2000);
	
	UI_Main();
 b6c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <UI_Main>
		
		LCD_Render();
		
		_delay_ms(1000);
    }*/
}
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	08 95       	ret

00000b76 <__vector_18>:
char UART_Buffer[UART_BUFFER_SIZE];
bool OverflowFlag = false;
uint16_t FrameTime;

ISR(USART_RX_vect)
{
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	2f 93       	push	r18
 b82:	8f 93       	push	r24
 b84:	9f 93       	push	r25
 b86:	ef 93       	push	r30
 b88:	ff 93       	push	r31
	UART_Buffer[Head] = UDR0;
 b8a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Head>
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 b94:	fc 01       	movw	r30, r24
 b96:	ef 5f       	subi	r30, 0xFF	; 255
 b98:	fc 4f       	sbci	r31, 0xFC	; 252
 b9a:	20 83       	st	Z, r18
	Head = (Head + 1) % UART_BUFFER_SIZE;
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	8f 77       	andi	r24, 0x7F	; 127
 ba0:	90 78       	andi	r25, 0x80	; 128
 ba2:	99 23       	and	r25, r25
 ba4:	24 f4       	brge	.+8      	; 0xbae <__vector_18+0x38>
 ba6:	01 97       	sbiw	r24, 0x01	; 1
 ba8:	80 68       	ori	r24, 0x80	; 128
 baa:	9f 6f       	ori	r25, 0xFF	; 255
 bac:	01 96       	adiw	r24, 0x01	; 1
 bae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Head>
	if (Head == Tail) // or check at the beginning of ISR if it will overflow, if yes - return
 bb2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Tail>
 bb6:	98 13       	cpse	r25, r24
 bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <__vector_18+0x4a>
		OverflowFlag = true;
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	OverflowFlag = true;
	PreOverflowFlag = false;
	}
	else
	PreOverflowFlag = false;*/
}
 bc0:	ff 91       	pop	r31
 bc2:	ef 91       	pop	r30
 bc4:	9f 91       	pop	r25
 bc6:	8f 91       	pop	r24
 bc8:	2f 91       	pop	r18
 bca:	0f 90       	pop	r0
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	0f 90       	pop	r0
 bd0:	1f 90       	pop	r1
 bd2:	18 95       	reti

00000bd4 <UI_Main>:
};


void UI_Main()
{
	Interface_Menu_P(&Menu_Main);
 bd4:	86 e9       	ldi	r24, 0x96	; 150
 bd6:	93 e0       	ldi	r25, 0x03	; 3
 bd8:	0e 94 19 04 	call	0x832	; 0x832 <Interface_Menu_P>
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
